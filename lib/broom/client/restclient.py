"""RESTful API client for Broom.

"""

# TODO: We need a bootstrap broom package at some point,
#       which will handle all the linkage to other
#       broom classes behind the scenes.

import broom
import requests

from .exception import BroomDBObjectNotFoundError, BroomDBClientError

class BroomDBObject(object):
    # A proxy object.  See notes above.
    def __init__(self, *args, **kwargs):
        raise NotImplementedError()

class BroomRESTClient(object):

    @classmethod
    def connect(cls, uri, *args, **kwargs):
        """Create an instance for the specified URI.

        """
        return cls(uri, *args, **kwargs)

    def __init__(self, uri):
        self.uri = uri

    def session(self):
        raise NotImplementedError("Sessions are not yet implemented.")

    def modified(self, obj):
        raise NotImplementedError()

    def new(self, object_type, *args, **kwargs):
        """Creates a new object of the specified type,
        initialized with the specified values, but does not
        save it to the database.

        Note that until the object is saved, its primary
        key may be set directly, but generally the primary
        key will be generated via a sequence or other
        lower-level handler.

        """
        raise NotImplementedError()

    def exists(self, object_type, *object_id):
        """Returns True if the object exists, or False otherwise.

        """
        raise NotImplementedError()

    def read(self, object_type, *object_id):
        """Returns the object identified by the given
        object_id.

        """
        raise NotImplementedError()

    def read_safe(self, object_type, *object_id):
        raise NotImplementedError()

    def read_many(self, object_type, object_ids):
        """Returns a list of objects of the specified
        type matching the provided IDs.  The
        ordering of the returned objects is non-
        deterministic.

        Any objects not found are excluded from
        the return list.

        """
        raise NotImplementedError()

    def read_ordered(self, object_type, object_ids):
        """Returns a list of objects of the specified
        type matching the provided object IDs.

        Results are returned in the same order as the object
        IDs specified.  If an object with a given object_id
        is not found, the None value is set in its
        corresponding position in the return list.

        """
        raise NotImplementedError()

    def commit(self):
        raise RuntimeError("Transactions via the RESTful API are "
                           "not yet supported."
                           )

    def rollback(self):
        raise RuntimeError("Transactions via the RESTful API are "
                           "not yet supported."
                           )

    def write(self, obj):
        """Writes the object to the database.

        If the object is new, a record will be
        created, possibly with an autogenerated
        primary key (depending on the table
        design).

        If the object already exists, it is
        updated.

        """
        raise NotImplementedError()

    def delete(self, obj):
        """Deletes the object from the database
        as long as no constraints prevent us from
        doing so.

        """
        raise NotImplementedError()

    def delete_by_id(self, object_type, *object_id):
        """Deletes the object of the specified
        type and ID if it exists.

        """
        raise NotImplementedError()

    def delete_many(self, object_type, object_filter):
        """Deletes all of the objects identified
        by the filter as long as all such objects
        can be deleted without violating any
        constraints.

        Otherwise nothing is deleted.

        """
        raise NotImplementedError()

    def transaction(self, *args, **kwargs):
        """Begins a new transaction.  Any writes or deletes
        issued during the transaction will be reverted if
        the transaction is rolled-back or if an exception
        is thrown.

        """
        raise RuntimeError("Transactions via the RESTful API "
                           "are not yet supported."
                           )

    def find_by(self, object_type, **kwargs):
        raise NotImplementedError()

    def find_one_by(self, object_type, **kwargs):
        raise NotImplementedError()

    def find(self, object_type, *args, **kwargs):
        raise NotImplementedError()

    def find_one(self, object_type, *args, **kwargs):
        raise NotImplementedError()
